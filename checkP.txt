from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import sys
import random
import time
# binding
import ttt_ui
import msgbox_player
import msgbox_computer
import SplashScreen
import msgbox_draw


class msgbox_draw(QWidget, msgbox_draw.Ui_Form):
    def __init__(self):
        super().__init__()
        self.setupUi(self)


class msgbox_player(QWidget, msgbox_player.Ui_Form):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        
        
class msgbox_computer(QWidget, msgbox_computer.Ui_Form):
    def __init__(self):
        super().__init__() 
        self.setupUi(self)       
  
    
class MainWindow(QMainWindow,ttt_ui.Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.baseGame()
        self.timer = QTimer()
        # Changing Variable Names For Important Labels     
        self.playerScore_lbl = self.label_4
        self.Al_Score_lbl = self.label_6
        
        # Score Value Variables of playerScore_lbl and AL_score_lbl
        self.playerScore = 0
        self.AL_Score = 0
        
        # Setting Them Each Other
        self.playerScore_lbl.setText(str(self.playerScore))
        self.Al_Score_lbl.setText(str(self.AL_Score))
        
        # Reset Scores
        self.Reset_Scores.clicked.connect(self.resetScores)
        
    
        
    def resetScores(self):
        self.playerScore_lbl.setText("0")
        self.playerScore = 0
        
        self.Al_Score_lbl.setText("0")  
        self.AL_Score = 0  
      
      
        
        
    def baseGame(self):
        
        # table of blocks
        self.blocks = [
            [self.left_top_block, self.top_middle_block, self.top_right_block],          # row 1
            [self.middle_left_block, self.middle_middle_block, self.middle_right_block], # row 2
            [self.bot_left_block, self.bot_middle_block, self.bot_right_block]           # row 3
        ]
        
        # coordinates (for AI)
        self.coordinates = {
            "1" : self.blocks[0][0],
            "2" : self.blocks[0][1],
            "3" : self.blocks[0][2],
            "4" : self.blocks[1][0],
            "5" : self.blocks[1][1],
            "6" : self.blocks[1][2],
            "7" : self.blocks[2][0],
            "8" : self.blocks[2][1], 
            "9" : self.blocks[2][2]
        }
        
        # Activating Winning Statuses and AL's Playing Function
        for rows in self.blocks:
            for block in rows:
                block.textChanged.connect(self.winningStatuses_player)
                block.textChanged.connect(self.winningStatuses_AL)
                block.textChanged.connect(self.Artificial_Intelligence)
        
#        setting "setReadOnly" function to whole table and appending elements to our list to use them for "mouseReleaseEvent"
#        mouseReleaseEvent => MRE        
        self.MRE_list = list() 
        for rows in self.blocks:
            for block in rows:
                block.setReadOnly(True)
                self.MRE_list.append(block)
            
        indexes = []
        for x in range(3):
            for y in range(3):
                indexes.append((x,y))
        
        MRE_Functions = [
            [self.MRE_function1, self.MRE_function2, self.MRE_function3],
            [self.MRE_function4, self.MRE_function5, self.MRE_function6],
            [self.MRE_function7, self.MRE_function8, self.MRE_function9]
        ]

        for i in indexes:
            self.blocks[i[0]][i[1]].mouseReleaseEvent = MRE_Functions[i[0]][i[1]]
            
            
#           MRE functions   
    def MRE_function1(self, event):
        self.blocks[0][0].setText("X")

    def MRE_function2(self, event):
        self.blocks[0][1].setText("X")
        
    def MRE_function3(self, event):
        self.blocks[0][2].setText("X")
        
    def MRE_function4(self, event):
        self.blocks[1][0].setText("X")
        
    def MRE_function5(self, event):
        self.blocks[1][1].setText("X")
        
    def MRE_function6(self, event):
        self.blocks[1][2].setText("X")
        
    def MRE_function7(self, event):
        self.blocks[2][0].setText("X")
        
    def MRE_function8(self, event): 
        self.blocks[2][1].setText("X")
        
    def MRE_function9(self, event): 
        self.blocks[2][2].setText("X")
        
        
        
        
        
    # Player Winning Status    
    def Player_Won(self):
        self.msgBox_playerW = msgbox_player()                                             
        self.msgBox_playerW.setWindowTitle("You Have Been Got a Score")
        self.msgBox_playerW.show()
        self.msgBox_playerW.closeEvent = self.closeEvent_Player    # After App Is Closed, Connect closeEvent_Player Funct
    def closeEvent_Player(self, event):
        # Reset Blocks
        for rows in self.blocks:
            for block in rows:
                block.clear()
                
        # Update playerScore
        self.playerScore += 1
        self.playerScore_lbl.setText(str(self.playerScore))
                
    
    
    # AL Winning Status         
    def AL_Won(self):
        self.msgBox_computerW = msgbox_computer()
        self.msgBox_computerW.setWindowTitle("Opponnent Has Been Got a Score")
        self.msgBox_computerW.show()
        self.msgBox_computerW.closeEvent = self.closeEvent_AL    # After App Is Closed, Connect closeEvent_AL Funct
    def closeEvent_AL(self, event):
        # Reset Blocks
        for rows in self.blocks:
            for block in rows:
                block.clear() 
        # Update AL_Score        
        self.AL_Score += 1
        self.Al_Score_lbl.setText(str(self.AL_Score))
        
        
       

    # Player and AL Winning Status, So Draw Status   
    def draw(self):
        self.msgBox_draw_W = msgbox_draw()
        self.msgBox_draw_W.setWindowTitle("DRAW !!")
        self.msgBox_draw_W.show()
        self.msgBox_draw_W.closeEvent = self. closeEvent_draw    # After App Is Closed, Connect closeEvent_draw Funct
    def closeEvent_draw(self, event):    
        # Reset Blocks
        for rows in self.blocks:
            for block in rows:
                block.clear() 
    
    
    
                
    def winningStatuses_player(self):
          
#       --> HORIZONTAL WIN 
        if (
            self.blocks[0][0].text() == "X" and 
            self.blocks[0][1].text() == "X" and 
            self.blocks[0][2].text() == "X"
        ):
            self.Player_Won()
        
        elif (
            self.blocks[1][0].text() == "X" and 
            self.blocks[1][1].text() == "X" and 
            self.blocks[1][2].text() == "X"
        ):
            self.Player_Won() 
        
        elif (
            self.blocks[2][0].text() == "X" and 
            self.blocks[2][1].text() == "X" and 
            self.blocks[2][2].text() == "X"
        ):
            self.Player_Won()
            

#       --> VERTICAL WIN
        elif (
            self.blocks[0][0].text() == "X" and 
            self.blocks[1][0].text() == "X" and 
            self.blocks[2][0].text() == "X"
        ):
            self.Player_Won()
        
        elif (
            self.blocks[0][1].text() == "X" and 
            self.blocks[1][1].text() == "X" and 
            self.blocks[2][1].text() == "X"
        ):
            self.Player_Won()
        
        elif (
            self.blocks[0][2].text() == "X" and 
            self.blocks[1][2].text() == "X" and 
            self.blocks[2][2].text() == "X"
        ):
            self.Player_Won()
         
            
#       --> CROSS WIN
        elif (
            self.blocks[0][0].text() == "X" and 
            self.blocks[1][1].text() == "X" and 
            self.blocks[2][2].text() == "X"
        ):
            self.Player_Won()
        
        elif (
            self.blocks[0][2].text() == "X" and 
            self.blocks[1][1].text() == "X" and 
            self.blocks[2][0].text() == "X"
        ):
            self.Player_Won()
           
            
        #           Draw
        elif (
            self.blocks[0][0].text() != "" and self.blocks[0][1].text() != "" and self.blocks[0][2].text() != "" and 
            self.blocks[1][0].text() != "" and self.blocks[1][1].text() != "" and self.blocks[1][2].text() != "" and 
            self.blocks[2][0].text() != "" and self.blocks[2][1].text() != "" and self.blocks[2][2].text() != "" 
        ):
            self.draw()
           


    def winningStatuses_AL(self):
        #       --> HORIZONTAL WIN 
        if (
            self.blocks[0][0].text() == "O" and 
            self.blocks[0][1].text() == "O" and 
            self.blocks[0][2].text() == "O"
        ):
            self.AL_Won()
        
        elif (
            self.blocks[1][0].text() == "O" and 
            self.blocks[1][1].text() == "O" and 
            self.blocks[1][2].text() == "O"
        ):
            self.AL_Won()
        
        elif (
            self.blocks[2][0].text() == "O" and 
            self.blocks[2][1].text() == "O" and 
            self.blocks[2][2].text() == "O"
        ):
            self.AL_Won()
            

#       --> VERTICAL WIN
        elif (
            self.blocks[0][0].text() == "O" and 
            self.blocks[1][0].text() == "O" and 
            self.blocks[2][0].text() == "O"
        ):
            self.AL_Won()
        
        elif (
            self.blocks[0][1].text() == "O" and 
            self.blocks[1][1].text() == "O" and 
            self.blocks[2][1].text() == "O"
        ):
            self.AL_Won()
        
        elif (
            self.blocks[0][2].text() == "O" and 
            self.blocks[1][2].text() == "O" and 
            self.blocks[2][2].text() == "O"
        ):
            self.AL_Won()
         
            
#       --> CROSS WIN
        elif (
            self.blocks[0][2].text() == "O" and 
            self.blocks[1][1].text() == "O" and 
            self.blocks[2][0].text() == "O"
        ):
            self.AL_Won()
        
        elif (
            self.blocks[0][0].text() == "O" and 
            self.blocks[1][1].text() == "O" and 
            self.blocks[2][2].text() == "O"
        ):
            self.AL_Won()
            

#           Draw
        elif (
            self.blocks[0][0].text() != "" and self.blocks[0][1].text() != "" and self.blocks[0][2].text() != "" and 
            self.blocks[1][0].text() != "" and self.blocks[1][1].text() != "" and self.blocks[1][2].text() != "" and 
            self.blocks[2][0].text() != "" and self.blocks[2][1].text() != "" and self.blocks[2][2].text() != "" 
        ):
            self.draw()


    
        
                  
    def Artificial_Intelligence(self):
        
        pass     
        
        
            
            
            
            


class SplashScreen(QMainWindow, SplashScreen.Ui_MainWindow):
    def __init__(self):
        super().__init__() 
        self.setupUi(self)
        
        # Remove Title Bar
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.changeValue()
        
    # ProgressBar Working Animation   
    def changeValue(self):   
        self.timer = QTimer()                                   # Get QTimer Class 
        self.timer.timeout.connect(self.changeValue)            # Setup Timeout Function
        self.timer.start(56)                                    # Start Timer
        self.progressBar.setValue(self.progressBar.value()+1)   # Increase progressBar Value
        
        
        # Transitioning to MainWindow After ProgressBar's value equals -100-
        if self.progressBar.value() == 100:
            self.timer.stop()
            self.timer.singleShot(800, lambda: self.close())
            self.mainWindow = MainWindow()
            self.mainWindow.show()
        


       
if __name__ == "__main__":
    app = QApplication(sys.argv)
    splashScreen = SplashScreen()
    splashScreen.setWindowTitle("Tic Tac Toe")
    splashScreen.setWindowIcon(QIcon("indir.png"))
    splashScreen.show()
    sys.exit(app.exec_())


self.getCoordinations = lambda: [[i.text() for i in self.blocks[0]], [i.text() for i in self.blocks[1]], [i.text() for i in self.blocks[2]]]     
    